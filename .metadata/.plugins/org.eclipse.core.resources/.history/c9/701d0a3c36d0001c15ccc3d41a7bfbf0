package com.ajay.lms.service;

import java.util.ArrayList;
import java.util.List;

import javax.transaction.Transactional;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.ajay.lms.dto.AddBatchDTO;
import com.ajay.lms.dto.AddMentorDTO;
import com.ajay.lms.dto.DropDownDTO;
import com.ajay.lms.dto.EmpRequestResDTO;
import com.ajay.lms.dto.RejectDTO;
import com.ajay.lms.dto.RequestApproveDTO;
import com.ajay.lms.pojo.BatchDetails;
import com.ajay.lms.pojo.Employee;
import com.ajay.lms.pojo.EmployeeRequest;
import com.ajay.lms.pojo.Mentor;
import com.ajay.lms.pojo.Technologies;
import com.ajay.lms.repo.BatchDetailsRepo;
import com.ajay.lms.repo.EmployeeRepo;
import com.ajay.lms.repo.EmployeeRequestRepo;
import com.ajay.lms.repo.MentorRepo;
import com.ajay.lms.repo.TechnologiesRepo;

@Service
public class AdminServiceImpl implements AdminService {

	@Autowired
	private BatchDetailsRepo batchRepo;

	@Autowired
	private EmployeeRequestRepo requestRepo;
	
	@Autowired
	private MentorRepo mentorRepo;

	@Autowired
	private EmployeeRepo employeeRepo;
	
	@Autowired
	private TechnologiesRepo technologiesRepo;
	
	@Autowired
	private EmailService emailService;

	@Override
	public BatchDetails addBatch(AddBatchDTO details) {
		Mentor mentor = mentorRepo.findById(details.getMentorId()).get();
		List<Technologies> technologies = technologiesRepo.findAllById(details.getTechId());
		BatchDetails batchDetails = new BatchDetails();
		BeanUtils.copyProperties(details, batchDetails);
		batchDetails.setTechnologies(technologies);
		batchDetails.setMentor(mentor);
		BatchDetails save = batchRepo.save(batchDetails);
		if (save == null) {
			throw new RuntimeException();
		}
		return save;
	}

	@Override
	public BatchDetails update(BatchDetails details, int id) {
		BatchDetails existing = batchRepo.findById(id).get();
		if (existing == null) {
			throw new RuntimeException();
		}
		existing.setBatchName(details.getBatchName());
		existing.setEndDate(details.getEndDate());
		existing.setMentor(details.getMentor());
		existing.setStatus(details.getStatus());
		existing.setTechnologies(details.getTechnologies());
		return existing;
	}

	@Override
	public void delete(Integer id) {
		batchRepo.deleteById(id);
	}

	@Override
	public Mentor addMentor(AddMentorDTO mentordetails) {
		Mentor findByEmpId = mentorRepo.findByEmpId(mentordetails.getEmpId());
		if (findByEmpId == null) {
			Mentor mentor = new Mentor();
			mentor.setEmpId(mentordetails.getEmpId());
			mentor.setEmail(mentordetails.getEmailId());
			mentor.setMentorName(mentordetails.getName());
			List<Technologies> findAllById = technologiesRepo.findAllById(mentordetails.getTechId());
			mentor.setTechnologies(findAllById);
			emailService.sendPassword(mentordetails.getEmailId());
			mentorRepo.save(mentor);
			return mentor;
		} else {
			findByEmpId.setEmpId(mentordetails.getEmpId());
			findByEmpId.setEmail(mentordetails.getEmailId());
			findByEmpId.setMentorName(mentordetails.getName());
			List<Technologies> findAllById = technologiesRepo.findAllById(mentordetails.getTechId());
			findByEmpId.setTechnologies(findAllById);
			return findByEmpId;
		}
	}

	@Override
	public List<BatchDetails> getAllBatchDetails() {
		List<BatchDetails> batchDetails = batchRepo.findAll();
		if (batchDetails == null) {
			throw new RuntimeException();
		}
		return batchDetails;
	}

	@Override
	public List<Mentor> getAllMentorDetails() {
		List<Mentor> mentorDetails = mentorRepo.findAll();

		if (mentorDetails == null) {
			throw new RuntimeException();
		}
		return mentorDetails;
	}

	@Override
	public List<Technologies> getAllTechnologies() {
		List<Technologies> technologies = technologiesRepo.findAll();
		if (technologies == null) {
			throw new RuntimeException();
		}
		return technologies;
	}

	@Override
	public List<DropDownDTO> getMentorName() {
		List<Mentor> mentor = mentorRepo.findAll();
		List<DropDownDTO> list = new ArrayList<>();
		mentor.stream().forEach(m->{
			list.add(new DropDownDTO(m.getId(),m.getMentorName()));
		});
		System.out.println(list);
		return list;
	}

	@Override
	public List<EmpRequestResDTO> getEmpRequest() {
		List<EmployeeRequest> all = requestRepo.findAll();
		List<Integer> empId = new ArrayList<>();
		all.stream().forEach(e->empId.add(e.getEmpId()));
		List<Employee> empList = employeeRepo.findAllById(empId);
		List<EmpRequestResDTO> resp = new ArrayList<>();
		empList.stream().forEach(e->{
			EmpRequestResDTO empRequestResDTO = new EmpRequestResDTO();
			empRequestResDTO.setEmpId(e.getId());
			empRequestResDTO.setEmpName(e.getEmpName());
			empRequestResDTO.setContactNo(e.getContact().get(0).getContactNumber());
			empRequestResDTO.setExperience((e.getExp()==null)?("Fresher"):("Experience"));
			empRequestResDTO.setPercentage(e.getEducationDetails().get(e.getEducationDetails().size()-1)
											.getPercentage());
			empRequestResDTO.setYop(e.getEducationDetails().get(e.getEducationDetails().size()-1).getYop());
			resp.add(empRequestResDTO);
		});
		return resp;
	}

	@Override
	@Transactional
	public List<Employee> approveRequest(RequestApproveDTO approve) {
		List<Employee> findAllById = employeeRepo.findAllById(approve.getEmployeesId());
		BatchDetails batchDetails = batchRepo.getById(approve.getBatchId());
		List<Employee> employees = batchDetails.getEmployees();
		employees.addAll(findAllById);
		batchDetails.setEmployees(employees);
		batchRepo.save(batchDetails);
		requestRepo.deleteByEmpIdIn(approve.getEmployeesId());
		return findAllById;
	}

	@Override
	public Mentor deleteMentor(Integer id) {
		Mentor mentor = mentorRepo.findById(id).get();
		mentorRepo.delete(mentor);
		return mentor;
	}

	@Override
	public List<EmployeeRequest> rejectRequest(RejectDTO reject) {
		List<EmployeeRequest> findAllById = requestRepo.findAllById(reject.getIds());
		findAllById.stream().forEach(e->e.setReason(reject.getReason()));
		findAllById.stream().forEach(e->requestRepo.save(e));
		return findAllById;
	}

}
