package com.ajay.lms.service;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import javax.management.RuntimeErrorException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.ajay.lms.dto.AddMock;
import com.ajay.lms.dto.DropDownResponse;
import com.ajay.lms.dto.EmployeeStatusDTO;
import com.ajay.lms.pojo.BatchDetails;
import com.ajay.lms.pojo.Employee;
import com.ajay.lms.pojo.Mentor;
import com.ajay.lms.pojo.Mock;
import com.ajay.lms.pojo.MockRatings;
import com.ajay.lms.pojo.Technologies;
import com.ajay.lms.repo.BatchDetailsRepo;
import com.ajay.lms.repo.EmployeeRepo;
import com.ajay.lms.repo.MentorRepo;
import com.ajay.lms.repo.MockRatingsRepo;
import com.ajay.lms.repo.MockRepo;

import lombok.extern.log4j.Log4j2;

@Log4j2
@Service
public class MetnorServiceImpl implements MentorService {

	@Autowired
	private EmployeeRepo empRepo;

	@Autowired
	private MentorRepo mentorRepo;

	@Autowired
	private BatchDetailsRepo batchDetailsRepo;

	@Autowired
	private MockRepo mockRepo;

	@Autowired
	private MockRatingsRepo mockRatingsRepo;

	@Override
	public List<Employee> getAllEmployee(String batchName) {
		System.out.println("id---------------->" + batchDetailsRepo.findIdByBatchName(batchName));
		BatchDetails batch = batchDetailsRepo.findIdByBatchName(batchName);
		if (batch == null) {
			throw new RuntimeException();
		}
		return batch.getEmployees();
	}

	@Override
	public List<MockRatings> getEmployeeDetails(String empId) {
		
		Employee empDetails = empRepo.findByEmpId(empId);
		if (empDetails == null) {
			throw new RuntimeException("Emp id doesnot exist");
		}
		if (empDetails.getRatings().size() < 1) {
			throw new RuntimeException("No Ratings for empId");
		}
		return empDetails.getRatings();
	}

	@Override
	public Mock createMock(AddMock mock) {
		Mock save = mockRepo.save(mock);
		if (save == null) {
			throw new RuntimeException();
		}
		return save;

	}

	@Override
	public MockRatings giveMockRatings(MockRatings ratings) {
		log.info(" service is called ");
		MockRatings mockRatings = mockRatingsRepo.save(ratings);
		if (mockRatings == null) {
			throw new RuntimeException();
		}
		return mockRatings;
	}

	@Override
	public List<DropDownResponse> getBatchNameByMentor(String mentorId) {
		Mentor mentor = mentorRepo.findByEmpId(mentorId);
		List<BatchDetails> batchDetails = mentor.getBatchDetails();
		List<DropDownResponse> dropDown = new ArrayList<>();
		batchDetails.stream().forEach(b -> {
			DropDownResponse response = new DropDownResponse();
			response.setId(b.getId());
			response.setName(b.getBatchName());
			dropDown.add(response);
		});
		if (dropDown.size() < 1) {
			throw new RuntimeException();
		}
		return dropDown;
	}

	@Override
	public List<EmployeeStatusDTO> getstatus(Integer batchId) {
		BatchDetails batchDetails = batchDetailsRepo.findById(batchId).get();
		List<Employee> employees = batchDetails.getEmployees();
		if (employees.size()==0) {
			throw new RuntimeException("No employees in the batch");
		}
		List<EmployeeStatusDTO> list = new ArrayList<>();
		employees.stream().forEach(e -> {
			EmployeeStatusDTO employeeStatusDTO = new EmployeeStatusDTO();
						employeeStatusDTO.setEmpId(e.getId());
						employeeStatusDTO.setEmpName(e.getEmpName());
						employeeStatusDTO.setMocksTaken(e.getRatings().size());
						employeeStatusDTO.setStatus(e.getStatus());
						list.add(employeeStatusDTO);
					});
		return list;
	}

}
